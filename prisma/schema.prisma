// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workshop {
  id            String          @id @default(uuid())
  name          String
  description   String
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  active        Boolean         @default(true)
  WorkshopClass WorkshopClass[]

  @@map("workshops")
}

model Class {
  id            String          @id @default(uuid())
  year          Int
  day_week      DayWeek
  start_time    String
  end_time      String
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  active        Boolean         @default(true)
  WorkshopClass WorkshopClass[]
  ClassTeachers ClassTeachers[]
  ClassStudents ClassStudents[]

  @@map("classes")
}

model WorkshopClass {
  id             String   @id @default(uuid())
  workshops      Workshop @relation(fields: [fk_id_workshop], references: [id])
  classes        Class    @relation(fields: [fk_id_class], references: [id])
  fk_id_workshop String
  fk_id_class    String   @unique()
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  active         Boolean  @default(true)

  @@map("workshop_classes")
}

model ClassTeachers {
  id            String   @id @default(uuid())
  teachers      User     @relation(fields: [fk_id_teacher], references: [id])
  classes       Class    @relation(fields: [fk_id_class], references: [id])
  fk_id_class   String
  fk_id_teacher String
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)

  @@map("class_teachers")
}

model ClassStudents {
  id            String   @id @default(uuid())
  students      Student  @relation(fields: [fk_id_student], references: [id])
  classes       Class    @relation(fields: [fk_id_class], references: [id])
  fk_id_class   String
  fk_id_student String
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)

  @@map("class_students")
}

enum DayWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String
  role          Role[]
  cpf           String          @unique
  bornDate      DateTime
  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  active        Boolean         @default(true)
  ClassTeachers ClassTeachers[]

  @@map("users")
}

enum Role {
  ROOT
  ADMIN
  TEACHER
  STUDENT
}

model Student {
  id            String          @id @default(uuid())
  name          String
  cpf           String          @unique
  rg            String
  phone         String?
  bornDate      DateTime
  
  period        Period[]
  ClassStudents ClassStudents[]
  Parent        Parent?         @relation(fields: [parentId], references: [id])
  parentId      String?
  Adress        Adress         @relation(fields: [adressId], references: [id])
  adressId      String

  updatedAt     DateTime        @updatedAt
  createdAt     DateTime        @default(now())
  active        Boolean         @default(true)
  @@map("students")
}

model Parent {
  id        String    @id @default(uuid())
  name      String
  cpf       String?   @unique
  rg        String?   @unique
  phone     String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  Student   Student[]

  @@map("parents")
}

model Adress {
  id           String    @id @default(uuid())
  street       String
  number       String?
  complement   String?
  neighborhood String
  updatedAt    DateTime  @updatedAt
  createdAt    DateTime  @default(now())
  Student      Student[]

  @@map("adresses")
}

enum Period {
  MORNING
  AFTERNOON
  NIGHT
}
